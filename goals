#!/bin/bash

filename="$HOME/goals.txt"
tmpfile="/tmp/goals.txt"

function add_goal() {
  DATE=$(date +%s)

  (
  echo "Start: $DATE"
  echo "Name: "
  echo "Initial: "
  echo "Rate per day: "
  echo "Command: "
  ) > "$tmpfile"

  $EDITOR "$tmpfile"

  if [ -s "$tmpfile" ]; then
    sed 's/.\+: //g' < "$tmpfile" |
      tr '\n' '\t' |
      sed 's/\t$/\n/g' >> "$filename"
          echo "Added to $filename"
        else
          echo "No changes made"
  fi
}

function show_status() {
  DATE=$(date +%s)
  printf "Behind  Projected  Actual  Difference  Name\n"
  awk -v date="$DATE" -F '\t' '
  function eval(expr, cmd, result) {
      cmd = "echo \"" expr "\" | bc -l"
      cmd | getline result
      close(cmd)
      return result
  }
  {
    start=$1
    name=$2
    initial=$3
    rate=eval($4)
    command=$5
    projected=(date-start)*rate/86400+initial
    command | getline actual
    close(command)
    difference=projected-actual

    if (rate == 0) {
      hours_behind=0
    } else {
      hours_behind=difference/rate*24
    }

    printf "%6.0f %10.0f %7.0f %11.0f  %s\n",
      hours_behind, projected, actual, difference, name
  }
    ' "$filename" | sort -h --reverse | \
      awk '{
        hours_behind=$1

        red="\033[0;31m"
        yellow="\033[0;33m"
        green="\033[0;32m"
        white="\033[0;37m"

        color=red
        if (hours_behind < -12) { # More than 12 hours ahead
          color=green
        } else if (hours_behind < 0) { # Ahead
          color=white
        } else if (hours_behind < 12) { # Less than 12 hours behind
          color=yellow
        } else { # More than 12 hours behind
          color=red
        }

        printf color
        print $0 "\033[0m"
      }'
}

if [ $# -eq 0 ]; then
  show_status
  exit 0
fi

case "$1" in
  help)
    echo "Usage: $0 <command>"
    echo "Commands:"
    echo "  add"
    echo "  show"
    echo "  edit"
    echo "  watch <n>"
    echo "  help"
    ;;
  add)
    add_goal
    ;;
  show)
    show_status
    ;;
  edit)
    $EDITOR "$filename"
    ;;
  watch)
    n=1

    if [ $# -eq 2 ]; then
      n="$2"
    fi

    watch -n "$n" -c "$0 show"
    ;;
  *)
    echo "Invalid command"
    exit 1
    ;;
esac
